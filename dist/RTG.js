var RNG={random:function(interval){var res;return void 0===interval?res=Math.random():Array.isArray(interval)&&2===interval.length&&interval[0]>=0&&interval[0]<=interval[1]&&(res=interval[0]+(interval[1]-interval[0])*Math.random()),res},interval:function(interval){}};export class RTG{constructor(mode,options){this.mode=mode||"scalene";this.options=options;this._interval=[0,10]}random(){return this["_"+this.mode]}_area(area){var s=area||this.options.value;var b=RNG.random(this._interval);var bound=2*s/b;if(bound>this._interval[1]){console.warn("The interval is not respected due to area value.")}var interval_c=[bound,bound+(this._interval[1]-this._interval[0])];var c=RNG.random(interval_c);var b_2=b*b;var c_2=c*c;var a=Math.sqrt(2*Math.sqrt(b_2*c_2-4*area*area)+b_2+c_2);return new Triangle(a,b,c)}_perimeter(perimeter){var p=perimeter||this.options.value;var triangle=this._scalene();var pt=triangle.perimeter();var a=triangle.a*p/pt;var b=triangle.b*p/pt;var c=triangle.c*p/pt;return new Triangle(a,b,c)}_scalene(){var a=RNG.random(this._interval);var b=RNG.random(this._interval);var c=RNG.random([Math.abs(a-b),a+b]);return new Triangle(a,b,c)}_integer(){var a=Math.floor(RNG.random(this._interval));var b=Math.floor(RNG.random(this._interval));var c=Math.floor(RNG.random([Math.abs(a-b),a+b]));return new Triangle(a,b,c)}_isocele(){var a=RNG.random(this._interval);var c=RNG.random([0,2*a]);return new Triangle(a,a,c)}_equilateral(){var a=RNG.random(this._interval);return new Triangle(a,a,a)}_rectangle(){var a=RNG.random(this._interval);var b=RNG.random(this._interval);var c=Math.sqrt(a*a+b*b);return new Triangle(a,b,c)}};export class Triangle{constructor(a,b,c){this.a=a;this.b=b;this.c=c}area(){var s=(this.a+this.b+this.c)/2;return Math.sqrt(s*(s-this.a)*(s-this.b)*(s-this.c))}perimeter(){return this.a+this.b+this.c}points(options){var interval=typeof options==="undefined"?{x:[0,10],y:[0,10]}:options.interval;var p1={x:RNG.random(interval.x),y:RNG.random(interval.y)};var alpha=RNG.random([0,2*Math.PI]);var p2={x:p1.x+this.a*Math.cos(alpha),y:p1.y+this.a*Math.sin(alpha)};var beta=Math.acos((this.a*this.a+this.c*this.c-this.b*this.b)/(2*this.a*this.c))+alpha;var p3={x:p1.x+this.c*Math.cos(beta),y:p1.y+this.c*Math.sin(beta)};return{p1:p1,p2:p2,p3:p3}}};